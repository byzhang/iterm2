#summary How to set up your shell for accepting proper key bindings.

== Introduction ==

This page deals with setting up your most favorite shell to work with the default xterm key bindings.

<wiki:toc max_depth="1" />

== About key binding profiles ==

The "basic" key bindings shipped with iTerm2 will not overwrite the default key codes sent by the keyboard.
This is useful if you just want to define key bindings for controlling iTerm2, i.e. control scrolling or tab handling.

The "xterm" key bindings however specify a set of overriding escape sequences defined by the VT100/VT200 standard for specific keys.
By doing that, standard compliant applications will work as expected.

It is recommended to choose/load the "xterm" key bindings to make sure most applications recognize special keys (arrow keys, function keys etc.) or combinations of modifiers (e.g. ALT, CMD, CTRL etc.) with special keys.

You should not change, delete or add key bindings of the shipped default "xterm" key bindings, unless you know what you are doing.

== About readline ==
 
Most applications working with dynamic user input, including shells, use the readline library for parsing user input, including received escape sequences.

Readline's behavior can be tuned via either the /etc/inputrc, or ~/.inputrc files.

/etc/inputrc will be parsed and evaluated first and can be used to define global settings.
The user specified ~/.inputrc can override settings, iff it exists.

At the time of writing, Mac OS X does neither ship a global /etc/inputrc, nor a default ~/.inputrc for newly created users.

== Configuring readline ==

It is recommended, that you configure your readline to make use of the sophisticated features.

As previously ruled out, it does not matter, where you define your settings, just make sure they will not be overridden.

=== Unicode I/O ===

Readline can make use of Unicode or alternatively use the "8bit hack" to input/output non-ASCII characters.

The default behavior is to not use this hack.

It can be useful though, if you do not use a Unicode character encoding, like UTF-8, UTF-16, USC-2 etc.

Define:

{{{
set input-meta on
set output-meta on
set convert-meta off
}}}

=== Word jumping ===

Readline also supports jumping between words, that is re-positioning the cursor before or after the current/next word.

The default binding for this is ESC-f for forward jumping and ESC-b for backward jumping.

Most users will find this inconvenient, as the escape key is far away from the default finger position.
While iTerm2 can be configured to use the Option (ALT) key for entering escape sequences, it should be better used as the Meta key or for entering "special" characters like greek letters, symbols, umlauts etc.

A good compromise is thus using a modifier combination of CTRL and SHIFT with the left/right arrow keys for word jumping. This can be defined as follows:

{{{
"\e[1;6D": backward-word
"\e[1;6C": forward-word
}}}

=== Line limits jumping ===

Of course, you can also navigate the cursor to the very begin or very end of the current input line.

This should work by default already, but if not, check what escape sequence is sent to the shell for the HOME and END keys (see chapter Escape sequence exploration) and define those in here:

{{{
"\eYOURSEQUENCE": beginning-of-line
"\eYOURSEQUENCE": end-of-line
}}}

=== Other ===

There is a ton load of other features readline has and your shell may support. If you interested in this matter, read the readline documentation via {{{ info readline }}}, or check the online documentation (see chapter External resources).

If nothing is shown by either method, iTerm2 does not generate any escape sequence for the provided key combination. In this case, you can define a sequence in your Bookmark's settings. Please always add standard xterm sequences, if they exist for your desired key combination. If you find this key binding is worth shipping with iTerm2 by default, please file a Feature Request in our [http://code.google.com/p/iterm2/issues/entry Bug tracker].

== Escape sequence exploration ==

To find out which escape sequence is generated by a key combination, use one of the here specified methods.

=== read ===

Run the {{{ read }}} shell built-in and input the key combination.
Sometimes, read will not echo the escape sequence, but do the asked action, like deleting a character (when backspace is pressed). In this case, use the method below.

=== Verbatim ===

Press CTRL-V to enter the verbatim mode first. After that, the next sequence you enter will not be parsed and executed by the shell, but instead the escape sequence be printed.


== External resources ==

* [http://tiswww.case.edu/php/chet/readline/readline.html#SEC9 Readline TeXinfo documentation]
* [http://tldp.org/HOWTO/Keyboard-and-Console-HOWTO.html The Linux keyboard and console HOWTO] (Note: whilst this document focusses on Linux, the most things mentioned do also apply to UNIX and its flavors.)
